{
  "plugins": ["jest", "prettier", "@typescript-eslint"],
  "parser": "@typescript-eslint/parser",
  "extends": ["plugin:github/recommended"],
  "env": {
    "node": true,
    "es6": true,
    "jest/globals": true
  },
  "overrides": [
    {
      "files": ["**/*.test.ts", "**/*.ts", "*.ts"],

      "parserOptions": {
        "ecmaVersion": 9,
        "sourceType": "module",
        "project": "./tsconfig.spec.json"
      },

      "rules": {
        "sort-imports": [
          "error",
          {
            "ignoreDeclarationSort": true
          }
        ],
        "prettier/prettier": "error",
        "import/order": [
          "error",
          {
            "newlines-between": "always",
            "pathGroupsExcludedImportTypes": []
          }
        ],
        "filenames/match-regex": "off",
        "i18n-text/no-en": "off",
        "eslint-comments/no-use": "off",
        "import/no-namespace": "off",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {"accessibility": "no-public"}
        ],
        "no-restricted-syntax": [
          "error",
          {
            // Reasons:
            // - Enums only work for a subset of use cases that union of string literals + objects work for and learning one language feature is easier than learning two language features
            // - Enums are a new language feature which have runtime semantics which means they change TypeScript from JS + types to JS + types + extra language features which is harder to teach without clear advantages for this specific feature
            "selector": "TSEnumDeclaration",
            "message": "Use a union of string literals instead of an enum."
          }
        ],
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": "error",
        "camelcase": "off",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {"allowExpressions": true}
        ],
        "@typescript-eslint/func-call-spacing": ["error", "never"],
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-function-type": "warn",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/promise-function-async": "error",
        "@typescript-eslint/require-array-sort-compare": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "semi": "off",
        "@typescript-eslint/semi": ["error", "never"],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unbound-method": "error"
      }
    }
  ]
}
